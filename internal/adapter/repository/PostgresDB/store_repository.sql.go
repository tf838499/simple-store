// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: store_repository.sql

package PostgresDB

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const deleteGood = `-- name: DeleteGood :exec
DELETE FROM goods WHERE id = $1
`

func (q *Queries) DeleteGood(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGood, id)
	return err
}

const getGetOrderByOwner = `-- name: GetGetOrderByOwner :many
SELECT id, created_at, updated_at, delete_at, amount, owner, customer_message, good_id, total_price, message, status FROM orders WHERE owner = $1
`

func (q *Queries) GetGetOrderByOwner(ctx context.Context, owner sql.NullString) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getGetOrderByOwner, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeleteAt,
			pq.Array(&i.Amount),
			&i.Owner,
			&i.CustomerMessage,
			pq.Array(&i.GoodID),
			&i.TotalPrice,
			&i.Message,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGoodByName = `-- name: GetGoodByName :one
SELECT id, created_at, updated_at, delete_at, image_name, descript, price, class FROM goods WHERE image_name = $1 LIMIT 1
`

func (q *Queries) GetGoodByName(ctx context.Context, imageName sql.NullString) (Good, error) {
	row := q.db.QueryRowContext(ctx, getGoodByName, imageName)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeleteAt,
		&i.ImageName,
		&i.Descript,
		&i.Price,
		&i.Class,
	)
	return i, err
}

const getGoodList = `-- name: GetGoodList :many
SELECT id, created_at, updated_at, delete_at, image_name, descript, price, class FROM goods
`

func (q *Queries) GetGoodList(ctx context.Context) ([]Good, error) {
	rows, err := q.db.QueryContext(ctx, getGoodList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Good{}
	for rows.Next() {
		var i Good
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeleteAt,
			&i.ImageName,
			&i.Descript,
			&i.Price,
			&i.Class,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGoodListByPage = `-- name: GetGoodListByPage :many
SELECT id, created_at, updated_at, delete_at, image_name, descript, price, class FROM goods ORDER BY id LIMIT $1 OFFSET $2
`

type GetGoodListByPageParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetGoodListByPage(ctx context.Context, arg GetGoodListByPageParams) ([]Good, error) {
	rows, err := q.db.QueryContext(ctx, getGoodListByPage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Good{}
	for rows.Next() {
		var i Good
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeleteAt,
			&i.ImageName,
			&i.Descript,
			&i.Price,
			&i.Class,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertGoods = `-- name: InsertGoods :exec
INSERT INTO goods (image_name,descript,price,class) 
VALUES ($1, $2, $3,$4)
`

type InsertGoodsParams struct {
	ImageName sql.NullString `json:"image_name"`
	Descript  sql.NullString `json:"descript"`
	Price     sql.NullInt64  `json:"price"`
	Class     sql.NullString `json:"class"`
}

func (q *Queries) InsertGoods(ctx context.Context, arg InsertGoodsParams) error {
	_, err := q.db.ExecContext(ctx, insertGoods,
		arg.ImageName,
		arg.Descript,
		arg.Price,
		arg.Class,
	)
	return err
}

const insertOrder = `-- name: InsertOrder :exec
INSERT INTO orders (amount,owner,good_id,total_price,message,status) 
VALUES ($1, $2, $3,$4,$5,$6)
`

type InsertOrderParams struct {
	Amount     []int32        `json:"amount"`
	Owner      sql.NullString `json:"owner"`
	GoodID     []string       `json:"good_id"`
	TotalPrice sql.NullInt32  `json:"total_price"`
	Message    sql.NullString `json:"message"`
	Status     sql.NullInt32  `json:"status"`
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) error {
	_, err := q.db.ExecContext(ctx, insertOrder,
		pq.Array(arg.Amount),
		arg.Owner,
		pq.Array(arg.GoodID),
		arg.TotalPrice,
		arg.Message,
		arg.Status,
	)
	return err
}

const updateGood = `-- name: UpdateGood :exec
Update goods
SET
    image_name = $1,
    descript = $2,
    price = $3,
    class = $4
WHERE
    id = $5
`

type UpdateGoodParams struct {
	ImageName sql.NullString `json:"image_name"`
	Descript  sql.NullString `json:"descript"`
	Price     sql.NullInt64  `json:"price"`
	Class     sql.NullString `json:"class"`
	ID        int32          `json:"id"`
}

func (q *Queries) UpdateGood(ctx context.Context, arg UpdateGoodParams) error {
	_, err := q.db.ExecContext(ctx, updateGood,
		arg.ImageName,
		arg.Descript,
		arg.Price,
		arg.Class,
		arg.ID,
	)
	return err
}
