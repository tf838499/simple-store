// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: store_repository.sql

package PostgresDB

import (
	"context"
	"database/sql"
)

const getGoodList = `-- name: GetGoodList :many
SELECT id, created_at, updated_at, delete_at, image_name, descript, price, class FROM goods
`

func (q *Queries) GetGoodList(ctx context.Context) ([]Good, error) {
	rows, err := q.db.QueryContext(ctx, getGoodList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Good{}
	for rows.Next() {
		var i Good
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeleteAt,
			&i.ImageName,
			&i.Descript,
			&i.Price,
			&i.Class,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertgoods = `-- name: Insertgoods :exec
INSERT INTO goods (id,image_name,descript,price,class) 
VALUES ($1, $2, $3,$4,$5)
`

type InsertgoodsParams struct {
	ID        int32          `json:"id"`
	ImageName sql.NullString `json:"image_name"`
	Descript  sql.NullString `json:"descript"`
	Price     sql.NullInt64  `json:"price"`
	Class     sql.NullString `json:"class"`
}

func (q *Queries) Insertgoods(ctx context.Context, arg InsertgoodsParams) error {
	_, err := q.db.ExecContext(ctx, insertgoods,
		arg.ID,
		arg.ImageName,
		arg.Descript,
		arg.Price,
		arg.Class,
	)
	return err
}
